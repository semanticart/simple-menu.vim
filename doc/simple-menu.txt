*simple-menu* an easy way to make menus

                                                                               ~
 ,---.  ,--.                 ,--.           ,--.   ,--.                        ~
'   .-' `--',--,--,--. ,---. |  | ,---.     |   `.'   | ,---. ,--,--, ,--.,--. ~
`.  `-. ,--.|        || .-. ||  || .-. :    |  |'.'|  || .-. :|      \|  ||  | ~
.-'    ||  ||  |  |  || '-' '|  |\   --.    |  |   |  |\   --.|  ||  |'  ''  ' ~
`-----' `--'`--`--`--'|  |-' `--' `----'    `--'   `--' `----'`--''--' `----'  ~
                      `--'                                                     ~

====================================================================
CONTENTS                                        *SimpleMenuContents*

    1. Usage ................ |SimpleMenuUsage|
    2. Examples ............. |SimpleMenuExamples|
    3. License .............. |SimpleMenuLicense|
    4. Bugs ................. |SimpleMenuBugs|
    5. Contributing ......... |SimpleMenuContributing|
    6. Changelog ............ |SimpleMenuChangelog|

====================================================================
Section 1: Usage                                   *SimpleMenuUsage*

Menus are defined as an array of arrays. Each sub-array is a menu item
consisting of a 1-character keyboard shortcut, a menu item description, and the
function to be called when the item is chosen.

The menu is displayed by calling `SimpleMenu` with your menu as an argument.

For example:

>
  call SimpleMenu([
    \ ['a', 'Migrate all', 'Migrate'],
    \ ['u', 'Migrate file up', 'MigrateUp'],
    \ ['d', 'Migrate file down', 'MigrateDown'],
    \ ['r', 'Re-migrate file (down then up)', 'MigrateRedo'],
  \ ])
<

Will show a menu with 4 options. Pressing the <d> key will run the function
`MigrateDown`.


====================================================================
Section 2: Examples                             *SimpleMenuExamples*

Using functions:
>
    function! SayHi()
        echo 'Hello'
    endfunction

    function! SayBye()
        echo 'See Ya!'
    endfunction

    function! MyGreetPopup()
        call MySimpleMenu([
                \    ['h', 'Say Hi', 'SayHi'],
                \    ['b', 'Say Bye', 'SayBye'],
                \ ])
    endfunction

    noremap <leader>g :call MyGreetPopup()<CR>
>

Using vim commands:
>
    function! MyWindowMenu()
        call SimpleMenu([
            \    ['k', 'close above', ':wincmd k | wincmd c'],
            \    ['j', 'close below', ':wincmd j | wincmd c'],
        \ ])
    endfunction

    noremap <leader>w :call MyWindowMenu()<CR>
>

Showing commands or function names instead of descriptions (ALE integration):
>
    function! MyAleMenu()
        call SimpleMenu([
            \    ['d', ':ALEDetail'],
            \    ['h', ':ALEHover'],
            \    ['n', ':ALENext'],
            \    ['p', ':ALEPrevious'],
            \    ['i', ':ALEInfo'],
        \ ])
    endfunction

    noremap <leader>l :call MyAleMenu()<CR>
>


====================================================================
Section 3: License                               *SimpleMenuLicense*

MIT

====================================================================
Section 4: Bugs                                     *SimpleMenuBugs*

If you find a bug please post it on the issue tracker:
https://github.com/semanticart/simple-menu.vim


====================================================================
Section 5: Contributing                     *SimpleMenuContributing*

If you have an idea for how to make this better, please fork the repo and send
a pull-request to start a discussion.

====================================================================
Section 6: Changelog                           *SimpleMenuChangelog*

v 1.0
    *First stable release*
